{"version":3,"sources":["webpack://@bulletproof/client/./src/components/EditBook/EditBook.tsx","webpack://@bulletproof/client/./src/components/EditBook/index.ts","webpack://@bulletproof/client/./src/components/Book/Book.tsx","webpack://@bulletproof/client/./src/components/Book/index.ts","webpack://@bulletproof/client/./src/generated/types.ts"],"names":["id","title","inputTitle","setInputTitle","React","updateBook","loading","error","useUpdateBookMutation","onError","err","console","message","className","onSubmit","e","preventDefault","variables","style","color","type","name","value","onChange","currentTarget","match","history","params","isEditing","setIsEditing","mutationError","setMutationError","data","useBookQuery","deleteBook","useDeleteBookMutation","update","cache","modify","fields","books","existing","readField","nodes","filtered","filter","nodeRef","push","onCompleted","book","author","created","lastChanged","onClick","initVal","BookDocument","gql","baseOptions","Apollo","DeleteBookDocument","CreateBookDocument","useCreateBookMutation","UpdateBookDocument","BooksDocument","useBooksQuery"],"mappings":"8KAOA,MCLA,EDKmC,IAAkB,IAAlB,GAAEA,EAAF,MAAMC,GAAY,EACpD,MAAOC,EAAYC,GAAiBC,WAAeH,IAE5CI,GAAY,QAAEC,EAAF,MAAWC,KAAWC,QAAsB,CAC9DC,QAAUC,GAAQC,QAAQJ,MAAMG,EAAIE,WAUrC,OACC,uBAAKC,UAAU,YACd,sCACA,wBAAMC,SATUC,IACjBA,EAAEC,iBACEV,GACJD,EAAW,CAAEY,UAAW,CAAEjB,KAAIC,MAAOC,OAOlCK,EAAQ,uBAAKW,MAAO,CAAEC,MAAO,QAAUZ,EAAMK,SAAiB,GAC/D,yBACCQ,KAAK,OACLC,KAAK,QACLC,MAAOpB,EACPqB,SAhBcR,GAAmBZ,EAAcY,EAAES,cAAcF,SAkBhE,0BAAQF,KAAK,UAAb,W,urBExBJ,MCNA,EDM+B,IAAuB,IAAvB,MAAEK,EAAF,QAASC,GAAc,EACrD,MAAM1B,EAAKyB,EAAME,OAAO3B,IAEjB4B,EAAWC,GAAgBzB,YAAe,IAC1C0B,EAAeC,GAAoB3B,WAAuB,KAC3D,QAAEE,EAAF,KAAW0B,EAAX,MAAiBzB,IAAU0B,QAAa,CAAEhB,UAAW,CAAEjB,SAItDkC,IAAcC,QAAsB,CAC1CC,OAASC,IACRA,EAAMC,OAAO,CACZC,OAAQ,CACPC,MAAO,CAACC,EAAD,KAA6B,IAAlB,UAAEC,GAAgB,EACnC,MAAMC,EAAqB,GAC3B,GAAIF,EAASE,MAAO,CACnB,MAAMC,EAAWH,EAASE,MAAME,QAC9BC,GAAiBJ,EAAU,KAAMI,KAAa9C,IAEhD2C,EAAMI,QAAQH,GAGf,cAAYH,GAAZ,IAAsBE,eAK1BK,YAAa,IAAMtB,EAAQqB,KAAK,KAChCtC,QAAUF,GAAUwB,EAAiBxB,EAAMK,WAG5C,OAAIL,EAAc,2BAAMA,EAAMK,SAC1BN,EAAgB,yCACf0B,WAAMiB,KAGV,uBAAKpC,UAAU,QACd,2BACC,0BAAKmB,EAAKiB,KAAKhD,OACf,0BACC,sCAAc+B,EAAKiB,KAAKjD,IACxB,yCAAiBgC,EAAKiB,KAAKC,OAAO7B,MAClC,yCAAiBW,EAAKiB,KAAKE,SAC3B,6CAAqBnB,EAAKiB,KAAKG,cAE/BtB,EACA,uBAAKZ,MAAO,CAAEC,MAAO,QAAUW,GAE/B,GAED,0BAAQuB,QAAS,IAAMnB,EAAW,CAAEjB,UAAW,CAAEjB,QAASoB,KAAK,UAA/D,UAGA,0BAAQiC,QA9CW,IAAMxB,GAAcyB,IAAaA,IA8CpBlC,KAAK,UAArC,SAIAQ,EAAY,gBAAC,EAAD,CAAU5B,GAAIgC,EAAKiB,KAAKjD,GAAIC,MAAO+B,EAAKiB,KAAKhD,QAAY,IAxBhD,qD,qOE+KlB,MAAMsD,GAAeC,QAAH,+JA8BlB,SAASvB,EAAawB,GACrB,OAAOC,WAA+CH,EAAcE,GAQrE,MAAME,GAAqBH,QAAH,qFAwBxB,SAASrB,EAAsBsB,GAC9B,OAAOC,cAAoEC,EAAoBF,GAKhG,MAAMG,GAAqBJ,QAAH,2LAgCxB,SAASK,EAAsBJ,GAC9B,OAAOC,cAAoEE,EAAoBH,GAKhG,MAAMK,GAAqBN,QAAH,qOAmCxB,SAAShD,EAAsBiD,GAC9B,OAAOC,cAAoEI,EAAoBL,GAKhG,MAAMM,GAAgBP,QAAH,+UAsCnB,SAASQ,EAAcP,GACtB,OAAOC,WAAiDK,EAAeN","file":"38.bundle.js","sourcesContent":["import React from 'react'\nimport { useUpdateBookMutation } from '../../generated/types'\n\ntype Props = { id: string; title: string }\ntype InputChange = React.ChangeEvent<HTMLInputElement>\ntype FormSubmit = React.FormEvent<HTMLFormElement>\n\nconst EditBook: React.FC<Props> = ({ id, title }) => {\n\tconst [inputTitle, setInputTitle] = React.useState(title)\n\n\tconst [updateBook, { loading, error }] = useUpdateBookMutation({\n\t\tonError: (err) => console.error(err.message),\n\t})\n\n\tconst onChange = (e: InputChange) => setInputTitle(e.currentTarget.value)\n\tconst onSubmit = (e: FormSubmit) => {\n\t\te.preventDefault()\n\t\tif (loading) return\n\t\tupdateBook({ variables: { id, title: inputTitle } })\n\t}\n\n\treturn (\n\t\t<div className=\"EditBook\">\n\t\t\t<h2>EditBook</h2>\n\t\t\t<form onSubmit={onSubmit}>\n\t\t\t\t{error ? <div style={{ color: 'red' }}>{error.message}</div> : ''}\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"title\"\n\t\t\t\t\tvalue={inputTitle}\n\t\t\t\t\tonChange={onChange}\n\t\t\t\t/>\n\t\t\t\t<button type=\"submit\">Save</button>\n\t\t\t</form>\n\t\t</div>\n\t)\n}\n\nexport default EditBook\n","import EditBook from './EditBook'\n\nexport default EditBook\n","import React from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { Reference } from '@apollo/client'\nimport { useBookQuery, useDeleteBookMutation } from '../../generated/types'\nimport EditBook from '../EditBook'\n\ntype Props = RouteComponentProps<{ id: string }>\n\nconst Book: React.FC<Props> = ({ match, history }) => {\n\tconst id = match.params.id\n\n\tconst [isEditing, setIsEditing] = React.useState(false)\n\tconst [mutationError, setMutationError] = React.useState<string>('')\n\tconst { loading, data, error } = useBookQuery({ variables: { id } })\n\n\tconst toggleEditing = () => setIsEditing((initVal) => !initVal)\n\n\tconst [deleteBook] = useDeleteBookMutation({\n\t\tupdate: (cache) => {\n\t\t\tcache.modify({\n\t\t\t\tfields: {\n\t\t\t\t\tbooks: (existing, { readField }) => {\n\t\t\t\t\t\tconst nodes: Reference[] = []\n\t\t\t\t\t\tif (existing.nodes) {\n\t\t\t\t\t\t\tconst filtered = existing.nodes.filter(\n\t\t\t\t\t\t\t\t(nodeRef: any) => readField('id', nodeRef) !== id,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tnodes.push(...filtered)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn { ...existing, nodes }\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t})\n\t\t},\n\t\tonCompleted: () => history.push('/'),\n\t\tonError: (error) => setMutationError(error.message),\n\t})\n\n\tif (error) return <div>{error.message}</div>\n\tif (loading) return <div>Loading...</div>\n\tif (!data?.book) return <div>No book with that ID</div>\n\n\treturn (\n\t\t<div className=\"Book\">\n\t\t\t<div>\n\t\t\t\t<h2>{data.book.title}</h2>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Book ID: {data.book.id}</li>\n\t\t\t\t\t<li>Written by: {data.book.author.name}</li>\n\t\t\t\t\t<li>Created at: {data.book.created}</li>\n\t\t\t\t\t<li>Last update at: {data.book.lastChanged}</li>\n\t\t\t\t</ul>\n\t\t\t\t{mutationError ? (\n\t\t\t\t\t<div style={{ color: 'red' }}>{mutationError}</div>\n\t\t\t\t) : (\n\t\t\t\t\t''\n\t\t\t\t)}\n\t\t\t\t<button onClick={() => deleteBook({ variables: { id } })} type=\"button\">\n\t\t\t\t\tDelete\n\t\t\t\t</button>\n\t\t\t\t<button onClick={toggleEditing} type=\"button\">\n\t\t\t\t\tEdit\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t{isEditing ? <EditBook id={data.book.id} title={data.book.title} /> : ''}\n\t\t</div>\n\t)\n}\n\nexport default Book\n","import Book from './Book'\n\nexport default Book\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  DateTime: any;\n  Date: any;\n  Time: any;\n};\n\n\nexport type AuthData = {\n  __typename?: 'AuthData';\n  user: User;\n  token: Scalars['String'];\n  tokenExpiration: Scalars['String'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  email?: Maybe<Scalars['String']>;\n  joined: Scalars['DateTime'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createBook?: Maybe<Book>;\n  deleteBook?: Maybe<Scalars['ID']>;\n  signin?: Maybe<AuthData>;\n  signup?: Maybe<User>;\n  updateBook?: Maybe<Book>;\n};\n\n\nexport type MutationCreateBookArgs = {\n  title: Scalars['String'];\n};\n\n\nexport type MutationDeleteBookArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationSigninArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type MutationSignupArgs = {\n  name: Scalars['String'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type MutationUpdateBookArgs = {\n  id: Scalars['ID'];\n  title: Scalars['String'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  book?: Maybe<Book>;\n  books: BookConnection;\n  me?: Maybe<User>;\n};\n\n\nexport type QueryBookArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryBooksArgs = {\n  after?: Maybe<Scalars['String']>;\n  first: Scalars['Int'];\n  where?: Maybe<BooksWhereInput>;\n};\n\nexport type Book = {\n  __typename?: 'Book';\n  id: Scalars['ID'];\n  title: Scalars['String'];\n  author: User;\n  created: Scalars['DateTime'];\n  lastChanged: Scalars['DateTime'];\n};\n\nexport type BookConnection = {\n  __typename?: 'BookConnection';\n  edges: Array<BookEdge>;\n  nodes: Array<Book>;\n  pageInfo: PageInfo;\n};\n\nexport type BookEdge = {\n  __typename?: 'BookEdge';\n  node: Book;\n  cursor: Scalars['String'];\n};\n\nexport type BooksWhereInput = {\n  _id?: Maybe<Scalars['String']>;\n};\n\n\n\n\nexport type PageInfo = {\n  __typename?: 'PageInfo';\n  startCursor?: Maybe<Scalars['String']>;\n  endCursor?: Maybe<Scalars['String']>;\n  hasNextPage: Scalars['Boolean'];\n  hasPreviousPage: Scalars['Boolean'];\n};\n\nexport type BookQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type BookQuery = (\n  { __typename?: 'Query' }\n  & { book?: Maybe<(\n    { __typename?: 'Book' }\n    & Pick<Book, 'id' | 'title' | 'created' | 'lastChanged'>\n    & { author: (\n      { __typename?: 'User' }\n      & Pick<User, 'name'>\n    ) }\n  )> }\n);\n\nexport type DeleteBookMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type DeleteBookMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteBook'>\n);\n\nexport type CreateBookMutationVariables = Exact<{\n  title: Scalars['String'];\n}>;\n\n\nexport type CreateBookMutation = (\n  { __typename?: 'Mutation' }\n  & { createBook?: Maybe<(\n    { __typename?: 'Book' }\n    & Pick<Book, 'id' | 'title' | 'created' | 'lastChanged'>\n    & { author: (\n      { __typename?: 'User' }\n      & Pick<User, 'name'>\n    ) }\n  )> }\n);\n\nexport type UpdateBookMutationVariables = Exact<{\n  id: Scalars['ID'];\n  title: Scalars['String'];\n}>;\n\n\nexport type UpdateBookMutation = (\n  { __typename?: 'Mutation' }\n  & { updateBook?: Maybe<(\n    { __typename?: 'Book' }\n    & Pick<Book, 'id' | 'title' | 'created' | 'lastChanged'>\n    & { author: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'name' | 'email'>\n    ) }\n  )> }\n);\n\nexport type BooksQueryVariables = Exact<{\n  first: Scalars['Int'];\n  after?: Maybe<Scalars['String']>;\n  where?: Maybe<BooksWhereInput>;\n}>;\n\n\nexport type BooksQuery = (\n  { __typename?: 'Query' }\n  & { books: (\n    { __typename?: 'BookConnection' }\n    & { nodes: Array<(\n      { __typename?: 'Book' }\n      & Pick<Book, 'id' | 'title' | 'created' | 'lastChanged'>\n      & { author: (\n        { __typename?: 'User' }\n        & Pick<User, 'name'>\n      ) }\n    )>, pageInfo: (\n      { __typename?: 'PageInfo' }\n      & Pick<PageInfo, 'endCursor' | 'hasNextPage'>\n    ) }\n  ) }\n);\n\n\nexport const BookDocument = gql`\n    query Book($id: ID!) {\n  book(id: $id) {\n    id\n    title\n    author {\n      name\n    }\n    created\n    lastChanged\n  }\n}\n    `;\n\n/**\n * __useBookQuery__\n *\n * To run a query within a React component, call `useBookQuery` and pass it any options that fit your needs.\n * When your component renders, `useBookQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBookQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useBookQuery(baseOptions: Apollo.QueryHookOptions<BookQuery, BookQueryVariables>) {\n        return Apollo.useQuery<BookQuery, BookQueryVariables>(BookDocument, baseOptions);\n      }\nexport function useBookLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<BookQuery, BookQueryVariables>) {\n          return Apollo.useLazyQuery<BookQuery, BookQueryVariables>(BookDocument, baseOptions);\n        }\nexport type BookQueryHookResult = ReturnType<typeof useBookQuery>;\nexport type BookLazyQueryHookResult = ReturnType<typeof useBookLazyQuery>;\nexport type BookQueryResult = Apollo.QueryResult<BookQuery, BookQueryVariables>;\nexport const DeleteBookDocument = gql`\n    mutation DeleteBook($id: ID!) {\n  deleteBook(id: $id)\n}\n    `;\nexport type DeleteBookMutationFn = Apollo.MutationFunction<DeleteBookMutation, DeleteBookMutationVariables>;\n\n/**\n * __useDeleteBookMutation__\n *\n * To run a mutation, you first call `useDeleteBookMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteBookMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteBookMutation, { data, loading, error }] = useDeleteBookMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteBookMutation(baseOptions?: Apollo.MutationHookOptions<DeleteBookMutation, DeleteBookMutationVariables>) {\n        return Apollo.useMutation<DeleteBookMutation, DeleteBookMutationVariables>(DeleteBookDocument, baseOptions);\n      }\nexport type DeleteBookMutationHookResult = ReturnType<typeof useDeleteBookMutation>;\nexport type DeleteBookMutationResult = Apollo.MutationResult<DeleteBookMutation>;\nexport type DeleteBookMutationOptions = Apollo.BaseMutationOptions<DeleteBookMutation, DeleteBookMutationVariables>;\nexport const CreateBookDocument = gql`\n    mutation CreateBook($title: String!) {\n  createBook(title: $title) {\n    id\n    title\n    created\n    lastChanged\n    author {\n      name\n    }\n  }\n}\n    `;\nexport type CreateBookMutationFn = Apollo.MutationFunction<CreateBookMutation, CreateBookMutationVariables>;\n\n/**\n * __useCreateBookMutation__\n *\n * To run a mutation, you first call `useCreateBookMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateBookMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createBookMutation, { data, loading, error }] = useCreateBookMutation({\n *   variables: {\n *      title: // value for 'title'\n *   },\n * });\n */\nexport function useCreateBookMutation(baseOptions?: Apollo.MutationHookOptions<CreateBookMutation, CreateBookMutationVariables>) {\n        return Apollo.useMutation<CreateBookMutation, CreateBookMutationVariables>(CreateBookDocument, baseOptions);\n      }\nexport type CreateBookMutationHookResult = ReturnType<typeof useCreateBookMutation>;\nexport type CreateBookMutationResult = Apollo.MutationResult<CreateBookMutation>;\nexport type CreateBookMutationOptions = Apollo.BaseMutationOptions<CreateBookMutation, CreateBookMutationVariables>;\nexport const UpdateBookDocument = gql`\n    mutation UpdateBook($id: ID!, $title: String!) {\n  updateBook(id: $id, title: $title) {\n    id\n    title\n    created\n    lastChanged\n    author {\n      id\n      name\n      email\n    }\n  }\n}\n    `;\nexport type UpdateBookMutationFn = Apollo.MutationFunction<UpdateBookMutation, UpdateBookMutationVariables>;\n\n/**\n * __useUpdateBookMutation__\n *\n * To run a mutation, you first call `useUpdateBookMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateBookMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateBookMutation, { data, loading, error }] = useUpdateBookMutation({\n *   variables: {\n *      id: // value for 'id'\n *      title: // value for 'title'\n *   },\n * });\n */\nexport function useUpdateBookMutation(baseOptions?: Apollo.MutationHookOptions<UpdateBookMutation, UpdateBookMutationVariables>) {\n        return Apollo.useMutation<UpdateBookMutation, UpdateBookMutationVariables>(UpdateBookDocument, baseOptions);\n      }\nexport type UpdateBookMutationHookResult = ReturnType<typeof useUpdateBookMutation>;\nexport type UpdateBookMutationResult = Apollo.MutationResult<UpdateBookMutation>;\nexport type UpdateBookMutationOptions = Apollo.BaseMutationOptions<UpdateBookMutation, UpdateBookMutationVariables>;\nexport const BooksDocument = gql`\n    query Books($first: Int!, $after: String, $where: BooksWhereInput) {\n  books(first: $first, after: $after, where: $where) {\n    nodes {\n      id\n      title\n      created\n      lastChanged\n      author {\n        name\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n    `;\n\n/**\n * __useBooksQuery__\n *\n * To run a query within a React component, call `useBooksQuery` and pass it any options that fit your needs.\n * When your component renders, `useBooksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBooksQuery({\n *   variables: {\n *      first: // value for 'first'\n *      after: // value for 'after'\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useBooksQuery(baseOptions: Apollo.QueryHookOptions<BooksQuery, BooksQueryVariables>) {\n        return Apollo.useQuery<BooksQuery, BooksQueryVariables>(BooksDocument, baseOptions);\n      }\nexport function useBooksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<BooksQuery, BooksQueryVariables>) {\n          return Apollo.useLazyQuery<BooksQuery, BooksQueryVariables>(BooksDocument, baseOptions);\n        }\nexport type BooksQueryHookResult = ReturnType<typeof useBooksQuery>;\nexport type BooksLazyQueryHookResult = ReturnType<typeof useBooksLazyQuery>;\nexport type BooksQueryResult = Apollo.QueryResult<BooksQuery, BooksQueryVariables>;"],"sourceRoot":""}