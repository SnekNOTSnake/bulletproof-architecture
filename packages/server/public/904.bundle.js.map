{"version":3,"sources":["webpack://@bulletproof/client/./src/components/Book/Book.tsx","webpack://@bulletproof/client/./src/components/Book/index.ts","webpack://@bulletproof/client/./src/generated/types.ts"],"names":["props","id","match","params","loading","data","error","useBookQuery","variables","book","className","title","author","name","created","lastChanged","BookDocument","gql","baseOptions","Apollo","BooksDocument","useBooksQuery"],"mappings":"+KAMA,MCJA,EDI+BA,IAC9B,MAAMC,EAAKD,EAAME,MAAMC,OAAOF,IACxB,QAAEG,EAAF,KAAWC,EAAX,MAAiBC,IAAUC,QAAa,CAAEC,UAAW,CAAEP,QAE7D,OAAIK,EAAc,2BAAMA,GACpBF,EAAgB,yCACfC,WAAMI,KAGV,uBAAKC,UAAU,QACd,0BAAKL,EAAKI,KAAKE,OACf,0BACC,sCAAcN,EAAKI,KAAKR,IACxB,yCAAiBI,EAAKI,KAAKG,OAAOC,MAClC,yCAAiBR,EAAKI,KAAKK,SAC3B,6CAAqBT,EAAKI,KAAKM,eATV,qD,qME2JlB,MAAMC,GAAeC,QAAH,+JA8BlB,SAASV,EAAaW,GACrB,OAAOC,WAA+CH,EAAcE,GAQrE,MAAME,GAAgBH,QAAH,qPAmCnB,SAASI,EAAcH,GACtB,OAAOC,WAAiDC,EAAeF","file":"904.bundle.js","sourcesContent":["import React from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { useBookQuery } from '../../generated/types'\n\ntype Props = RouteComponentProps<{ id: string }>\n\nconst Book: React.FC<Props> = (props) => {\n\tconst id = props.match.params.id\n\tconst { loading, data, error } = useBookQuery({ variables: { id } })\n\n\tif (error) return <div>{error}</div>\n\tif (loading) return <div>Loading...</div>\n\tif (!data?.book) return <div>No book with that ID</div>\n\n\treturn (\n\t\t<div className=\"Book\">\n\t\t\t<h2>{data.book.title}</h2>\n\t\t\t<ul>\n\t\t\t\t<li>Book ID: {data.book.id}</li>\n\t\t\t\t<li>Written by: {data.book.author.name}</li>\n\t\t\t\t<li>Created at: {data.book.created}</li>\n\t\t\t\t<li>Last update at: {data.book.lastChanged}</li>\n\t\t\t</ul>\n\t\t</div>\n\t)\n}\n\nexport default Book\n","import Book from './Book'\n\nexport default Book\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  DateTime: any;\n  Date: any;\n  Time: any;\n};\n\n\nexport type AuthData = {\n  __typename?: 'AuthData';\n  user: User;\n  token: Scalars['String'];\n  tokenExpiration: Scalars['String'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  email?: Maybe<Scalars['String']>;\n  joined: Scalars['DateTime'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createBook?: Maybe<Book>;\n  deleteBook?: Maybe<Scalars['ID']>;\n  signin?: Maybe<AuthData>;\n  signup?: Maybe<User>;\n  updateBook?: Maybe<Book>;\n};\n\n\nexport type MutationCreateBookArgs = {\n  title: Scalars['String'];\n};\n\n\nexport type MutationDeleteBookArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationSigninArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type MutationSignupArgs = {\n  name: Scalars['String'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type MutationUpdateBookArgs = {\n  id: Scalars['ID'];\n  title: Scalars['String'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  book?: Maybe<Book>;\n  books: BookConnection;\n  me?: Maybe<User>;\n};\n\n\nexport type QueryBookArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryBooksArgs = {\n  after?: Maybe<Scalars['String']>;\n  first: Scalars['Int'];\n  where?: Maybe<BooksWhereInput>;\n};\n\nexport type Book = {\n  __typename?: 'Book';\n  id: Scalars['ID'];\n  title: Scalars['String'];\n  author: User;\n  created: Scalars['DateTime'];\n  lastChanged: Scalars['DateTime'];\n};\n\nexport type BookConnection = {\n  __typename?: 'BookConnection';\n  edges: Array<BookEdge>;\n  nodes: Array<Book>;\n  pageInfo: PageInfo;\n};\n\nexport type BookEdge = {\n  __typename?: 'BookEdge';\n  node: Book;\n  cursor: Scalars['String'];\n};\n\nexport type BooksWhereInput = {\n  _id?: Maybe<Scalars['String']>;\n};\n\n\n\n\nexport type PageInfo = {\n  __typename?: 'PageInfo';\n  startCursor?: Maybe<Scalars['String']>;\n  endCursor?: Maybe<Scalars['String']>;\n  hasNextPage: Scalars['Boolean'];\n  hasPreviousPage: Scalars['Boolean'];\n};\n\nexport type BookQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type BookQuery = (\n  { __typename?: 'Query' }\n  & { book?: Maybe<(\n    { __typename?: 'Book' }\n    & Pick<Book, 'id' | 'title' | 'created' | 'lastChanged'>\n    & { author: (\n      { __typename?: 'User' }\n      & Pick<User, 'name'>\n    ) }\n  )> }\n);\n\nexport type BooksQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type BooksQuery = (\n  { __typename?: 'Query' }\n  & { books: (\n    { __typename?: 'BookConnection' }\n    & { nodes: Array<(\n      { __typename?: 'Book' }\n      & Pick<Book, 'id' | 'title' | 'created' | 'lastChanged'>\n      & { author: (\n        { __typename?: 'User' }\n        & Pick<User, 'name'>\n      ) }\n    )>, pageInfo: (\n      { __typename?: 'PageInfo' }\n      & Pick<PageInfo, 'endCursor' | 'hasNextPage'>\n    ) }\n  ) }\n);\n\n\nexport const BookDocument = gql`\n    query Book($id: ID!) {\n  book(id: $id) {\n    id\n    title\n    author {\n      name\n    }\n    created\n    lastChanged\n  }\n}\n    `;\n\n/**\n * __useBookQuery__\n *\n * To run a query within a React component, call `useBookQuery` and pass it any options that fit your needs.\n * When your component renders, `useBookQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBookQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useBookQuery(baseOptions: Apollo.QueryHookOptions<BookQuery, BookQueryVariables>) {\n        return Apollo.useQuery<BookQuery, BookQueryVariables>(BookDocument, baseOptions);\n      }\nexport function useBookLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<BookQuery, BookQueryVariables>) {\n          return Apollo.useLazyQuery<BookQuery, BookQueryVariables>(BookDocument, baseOptions);\n        }\nexport type BookQueryHookResult = ReturnType<typeof useBookQuery>;\nexport type BookLazyQueryHookResult = ReturnType<typeof useBookLazyQuery>;\nexport type BookQueryResult = Apollo.QueryResult<BookQuery, BookQueryVariables>;\nexport const BooksDocument = gql`\n    query Books {\n  books(first: 2) {\n    nodes {\n      id\n      title\n      created\n      lastChanged\n      author {\n        name\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n    `;\n\n/**\n * __useBooksQuery__\n *\n * To run a query within a React component, call `useBooksQuery` and pass it any options that fit your needs.\n * When your component renders, `useBooksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBooksQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useBooksQuery(baseOptions?: Apollo.QueryHookOptions<BooksQuery, BooksQueryVariables>) {\n        return Apollo.useQuery<BooksQuery, BooksQueryVariables>(BooksDocument, baseOptions);\n      }\nexport function useBooksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<BooksQuery, BooksQueryVariables>) {\n          return Apollo.useLazyQuery<BooksQuery, BooksQueryVariables>(BooksDocument, baseOptions);\n        }\nexport type BooksQueryHookResult = ReturnType<typeof useBooksQuery>;\nexport type BooksLazyQueryHookResult = ReturnType<typeof useBooksLazyQuery>;\nexport type BooksQueryResult = Apollo.QueryResult<BooksQuery, BooksQueryVariables>;"],"sourceRoot":""}