{"version":3,"sources":["webpack://@bulletproof/client/../node_modules/@material-ui/core/esm/CardActions/CardActions.js","webpack://@bulletproof/client/./src/components/Home/Home.style.ts","webpack://@bulletproof/client/./src/components/Home/Home.tsx","webpack://@bulletproof/client/./src/components/Home/index.ts","webpack://@bulletproof/client/./src/generated/types.ts"],"names":["CardActions","React","props","ref","_props$disableSpacing","disableSpacing","classes","className","other","_objectWithoutProperties","_extends","clsx","root","spacing","withStyles","display","alignItems","padding","marginLeft","name","makeStyles","theme","cardGrid","marginBottom","subtitle","fontSize","options","variables","first","data","loading","error","fetchMore","useBooksQuery","useStyles","Typography","variant","message","Box","Grid","container","books","nodes","map","book","item","md","sm","xs","key","id","Card","CardHeader","title","subheader","author","formatDistance","Date","created","CardContent","Link","underline","component","to","Button","color","pageInfo","hasNextPage","type","onClick","after","endCursor","BookDocument","gql","useBookQuery","baseOptions","Apollo","DeleteBookDocument","useDeleteBookMutation","CreateBookDocument","useCreateBookMutation","UpdateBookDocument","useUpdateBookMutation","BooksDocument"],"mappings":"0MAqBIA,EAA2BC,cAAiB,SAAqBC,EAAOC,GAC1E,IAAIC,EAAwBF,EAAMG,eAC9BA,OAA2C,IAA1BD,GAA2CA,EAC5DE,EAAUJ,EAAMI,QAChBC,EAAYL,EAAMK,UAClBC,GAAQC,OAAyBP,EAAO,CAAC,iBAAkB,UAAW,cAE1E,OAAoBD,gBAAoB,OAAOS,OAAS,CACtDH,WAAWI,OAAKL,EAAQM,KAAML,GAAYF,GAAkBC,EAAQO,SACpEV,IAAKA,GACJK,OA6BL,SAAeM,OAtDK,CAElBF,KAAM,CACJG,QAAS,OACTC,WAAY,SACZC,QAAS,GAIXJ,QAAS,CACP,yBAA0B,CACxBK,WAAY,KA2CgB,CAChCC,KAAM,kBADR,CAEGnB,I,qLC5DH,SAAeoB,E,QAAAA,IAAYC,IAAD,CACzBC,SAAU,CACTC,aAAcF,EAAMR,QAAQ,IAE7BW,SAAU,CACTC,SAAU,Q,cCUZ,MAAMC,EAAU,CAAEC,UAAW,CAAEC,MAAO,ICftC,EDgBuB,KACtB,MAAM,KAAEC,EAAF,QAAQC,EAAR,MAAiBC,EAAjB,UAAwBC,IAAcC,QAAcP,GAEpDpB,EAAU4B,IAEhB,OAAIH,EAAc,gBAACI,EAAA,EAAD,CAAYC,QAAQ,MAAML,EAAMM,SAC9CP,EAAgB,gBAACK,EAAA,EAAD,CAAYC,QAAQ,MAApB,mBAGnB,gBAACE,EAAA,EAAD,KACC,gBAACC,EAAA,EAAD,CAAMC,WAAS,EAAC3B,QAAS,GACvBgB,aADF,EACEA,EAAMY,MAAMC,MAAMC,KAAKC,GACvB,gBAACL,EAAA,EAAD,CACChC,UAAWD,EAAQgB,SACnBuB,MAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,GACJC,IAAKL,EAAKM,IAEV,gBAACC,EAAA,EAAD,KACC,gBAACC,EAAA,EAAD,CACCC,MAAOT,EAAKS,MACZC,UAAS,aAAQV,EAAKW,OAAOpC,KAApB,cAA6BqC,OACrC,IAAIC,KAAKb,EAAKc,SACd,IAAID,MAFI,UAKV,gBAACE,EAAA,EAAD,KACC,gBAACxB,EAAA,EAAD,iBACUqB,OAAe,IAAIC,KAAKb,EAAKc,SAAU,IAAID,MAAS,IAD9D,QAKD,gBAACzD,EAAA,EAAD,KACC,gBAAC4D,EAAA,EAAD,CACCC,UAAU,OACVC,UAAWF,KACXG,GAAE,gBAAWnB,EAAKM,KAElB,gBAACc,EAAA,EAAD,CAAQC,MAAM,WAAd,kBAOLpC,WAAMY,MAAMyB,SAASC,YACrB,gBAACH,EAAA,EAAD,CACCC,MAAM,UACN7B,QAAQ,YACRgC,KAAK,SACLC,QAAS,IACRrC,EAAU,CACTL,UAAW,CAAEC,MAAO,EAAG0C,MAAOzC,EAAKY,MAAMyB,SAASK,cANrD,QAaA,M,qOEyIG,MAAMC,GAAeC,QAAH,+JA8BlB,SAASC,EAAaC,GACrB,OAAOC,WAA+CJ,EAAcG,GAQrE,MAAME,GAAqBJ,QAAH,qFAwBxB,SAASK,EAAsBH,GAC9B,OAAOC,cAAoEC,EAAoBF,GAKhG,MAAMI,GAAqBN,QAAH,2LAgCxB,SAASO,EAAsBL,GAC9B,OAAOC,cAAoEG,EAAoBJ,GAKhG,MAAMM,GAAqBR,QAAH,qOAmCxB,SAASS,EAAsBP,GAC9B,OAAOC,cAAoEK,EAAoBN,GAKhG,MAAMQ,GAAgBV,QAAH,+UAsCnB,SAASxC,EAAc0C,GACtB,OAAOC,WAAiDO,EAAeR","file":"272.bundle.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: 8\n  },\n\n  /* Styles applied to the root element if `disableSpacing={false}`. */\n  spacing: {\n    '& > :not(:first-child)': {\n      marginLeft: 8\n    }\n  }\n};\nvar CardActions = /*#__PURE__*/React.forwardRef(function CardActions(props, ref) {\n  var _props$disableSpacing = props.disableSpacing,\n      disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing,\n      classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"disableSpacing\", \"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, !disableSpacing && classes.spacing),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActions.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the actions do not have additional margin.\n   */\n  disableSpacing: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardActions'\n})(CardActions);","import { makeStyles } from '@material-ui/core/styles'\n\nexport default makeStyles((theme) => ({\n\tcardGrid: {\n\t\tmarginBottom: theme.spacing(3),\n\t},\n\tsubtitle: {\n\t\tfontSize: 14,\n\t},\n}))\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { formatDistance } from 'date-fns'\n\nimport Box from '@material-ui/core/Box'\nimport Grid from '@material-ui/core/Grid'\nimport Card from '@material-ui/core/Card'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardActions from '@material-ui/core/CardActions'\nimport Button from '@material-ui/core/Button'\nimport LinkComponent from '@material-ui/core/Link'\nimport Typography from '@material-ui/core/Typography'\n\nimport useStyles from './Home.style'\nimport { useBooksQuery } from '../../generated/types'\n\nconst options = { variables: { first: 2 } }\nconst Home: React.FC = () => {\n\tconst { data, loading, error, fetchMore } = useBooksQuery(options)\n\n\tconst classes = useStyles()\n\n\tif (error) return <Typography variant=\"h5\">{error.message}</Typography>\n\tif (loading) return <Typography variant=\"h6\">Loading data...</Typography>\n\n\treturn (\n\t\t<Box>\n\t\t\t<Grid container spacing={3}>\n\t\t\t\t{data?.books.nodes.map((book) => (\n\t\t\t\t\t<Grid\n\t\t\t\t\t\tclassName={classes.cardGrid}\n\t\t\t\t\t\titem\n\t\t\t\t\t\tmd={4}\n\t\t\t\t\t\tsm={6}\n\t\t\t\t\t\txs={12}\n\t\t\t\t\t\tkey={book.id}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Card>\n\t\t\t\t\t\t\t<CardHeader\n\t\t\t\t\t\t\t\ttitle={book.title}\n\t\t\t\t\t\t\t\tsubheader={`By ${book.author.name}, ${formatDistance(\n\t\t\t\t\t\t\t\t\tnew Date(book.created),\n\t\t\t\t\t\t\t\t\tnew Date(),\n\t\t\t\t\t\t\t\t)} ago`}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t<Typography>\n\t\t\t\t\t\t\t\t\tUpdated {formatDistance(new Date(book.created), new Date())}{' '}\n\t\t\t\t\t\t\t\t\tago\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t<CardActions>\n\t\t\t\t\t\t\t\t<LinkComponent\n\t\t\t\t\t\t\t\t\tunderline=\"none\"\n\t\t\t\t\t\t\t\t\tcomponent={Link}\n\t\t\t\t\t\t\t\t\tto={`/book/${book.id}`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Button color=\"inherit\">Details</Button>\n\t\t\t\t\t\t\t\t</LinkComponent>\n\t\t\t\t\t\t\t</CardActions>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</Grid>\n\t\t\t\t))}\n\t\t\t</Grid>\n\t\t\t{data?.books.pageInfo.hasNextPage ? (\n\t\t\t\t<Button\n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\tfetchMore({\n\t\t\t\t\t\t\tvariables: { first: 2, after: data.books.pageInfo.endCursor },\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\tMore\n\t\t\t\t</Button>\n\t\t\t) : (\n\t\t\t\t''\n\t\t\t)}\n\t\t</Box>\n\t)\n}\n\nexport default Home\n","import Home from './Home'\n\nexport default Home\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  DateTime: any;\n  Date: any;\n  Time: any;\n};\n\n\nexport type AuthData = {\n  __typename?: 'AuthData';\n  user: User;\n  token: Scalars['String'];\n  tokenExpiration: Scalars['String'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  email?: Maybe<Scalars['String']>;\n  joined: Scalars['DateTime'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createBook?: Maybe<Book>;\n  deleteBook?: Maybe<Scalars['ID']>;\n  signin?: Maybe<AuthData>;\n  signup?: Maybe<User>;\n  updateBook?: Maybe<Book>;\n};\n\n\nexport type MutationCreateBookArgs = {\n  title: Scalars['String'];\n};\n\n\nexport type MutationDeleteBookArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationSigninArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type MutationSignupArgs = {\n  name: Scalars['String'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type MutationUpdateBookArgs = {\n  id: Scalars['ID'];\n  title: Scalars['String'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  book?: Maybe<Book>;\n  books: BookConnection;\n  me?: Maybe<User>;\n};\n\n\nexport type QueryBookArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryBooksArgs = {\n  after?: Maybe<Scalars['String']>;\n  first: Scalars['Int'];\n  where?: Maybe<BooksWhereInput>;\n};\n\nexport type Book = {\n  __typename?: 'Book';\n  id: Scalars['ID'];\n  title: Scalars['String'];\n  author: User;\n  created: Scalars['DateTime'];\n  lastChanged: Scalars['DateTime'];\n};\n\nexport type BookConnection = {\n  __typename?: 'BookConnection';\n  edges: Array<BookEdge>;\n  nodes: Array<Book>;\n  pageInfo: PageInfo;\n};\n\nexport type BookEdge = {\n  __typename?: 'BookEdge';\n  node: Book;\n  cursor: Scalars['String'];\n};\n\nexport type BooksWhereInput = {\n  _id?: Maybe<Scalars['String']>;\n};\n\n\n\n\nexport type PageInfo = {\n  __typename?: 'PageInfo';\n  startCursor?: Maybe<Scalars['String']>;\n  endCursor?: Maybe<Scalars['String']>;\n  hasNextPage: Scalars['Boolean'];\n  hasPreviousPage: Scalars['Boolean'];\n};\n\nexport type BookQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type BookQuery = (\n  { __typename?: 'Query' }\n  & { book?: Maybe<(\n    { __typename?: 'Book' }\n    & Pick<Book, 'id' | 'title' | 'created' | 'lastChanged'>\n    & { author: (\n      { __typename?: 'User' }\n      & Pick<User, 'name'>\n    ) }\n  )> }\n);\n\nexport type DeleteBookMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type DeleteBookMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteBook'>\n);\n\nexport type CreateBookMutationVariables = Exact<{\n  title: Scalars['String'];\n}>;\n\n\nexport type CreateBookMutation = (\n  { __typename?: 'Mutation' }\n  & { createBook?: Maybe<(\n    { __typename?: 'Book' }\n    & Pick<Book, 'id' | 'title' | 'created' | 'lastChanged'>\n    & { author: (\n      { __typename?: 'User' }\n      & Pick<User, 'name'>\n    ) }\n  )> }\n);\n\nexport type UpdateBookMutationVariables = Exact<{\n  id: Scalars['ID'];\n  title: Scalars['String'];\n}>;\n\n\nexport type UpdateBookMutation = (\n  { __typename?: 'Mutation' }\n  & { updateBook?: Maybe<(\n    { __typename?: 'Book' }\n    & Pick<Book, 'id' | 'title' | 'created' | 'lastChanged'>\n    & { author: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'name' | 'email'>\n    ) }\n  )> }\n);\n\nexport type BooksQueryVariables = Exact<{\n  first: Scalars['Int'];\n  after?: Maybe<Scalars['String']>;\n  where?: Maybe<BooksWhereInput>;\n}>;\n\n\nexport type BooksQuery = (\n  { __typename?: 'Query' }\n  & { books: (\n    { __typename?: 'BookConnection' }\n    & { nodes: Array<(\n      { __typename?: 'Book' }\n      & Pick<Book, 'id' | 'title' | 'created' | 'lastChanged'>\n      & { author: (\n        { __typename?: 'User' }\n        & Pick<User, 'name'>\n      ) }\n    )>, pageInfo: (\n      { __typename?: 'PageInfo' }\n      & Pick<PageInfo, 'endCursor' | 'hasNextPage'>\n    ) }\n  ) }\n);\n\n\nexport const BookDocument = gql`\n    query Book($id: ID!) {\n  book(id: $id) {\n    id\n    title\n    author {\n      name\n    }\n    created\n    lastChanged\n  }\n}\n    `;\n\n/**\n * __useBookQuery__\n *\n * To run a query within a React component, call `useBookQuery` and pass it any options that fit your needs.\n * When your component renders, `useBookQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBookQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useBookQuery(baseOptions: Apollo.QueryHookOptions<BookQuery, BookQueryVariables>) {\n        return Apollo.useQuery<BookQuery, BookQueryVariables>(BookDocument, baseOptions);\n      }\nexport function useBookLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<BookQuery, BookQueryVariables>) {\n          return Apollo.useLazyQuery<BookQuery, BookQueryVariables>(BookDocument, baseOptions);\n        }\nexport type BookQueryHookResult = ReturnType<typeof useBookQuery>;\nexport type BookLazyQueryHookResult = ReturnType<typeof useBookLazyQuery>;\nexport type BookQueryResult = Apollo.QueryResult<BookQuery, BookQueryVariables>;\nexport const DeleteBookDocument = gql`\n    mutation DeleteBook($id: ID!) {\n  deleteBook(id: $id)\n}\n    `;\nexport type DeleteBookMutationFn = Apollo.MutationFunction<DeleteBookMutation, DeleteBookMutationVariables>;\n\n/**\n * __useDeleteBookMutation__\n *\n * To run a mutation, you first call `useDeleteBookMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteBookMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteBookMutation, { data, loading, error }] = useDeleteBookMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteBookMutation(baseOptions?: Apollo.MutationHookOptions<DeleteBookMutation, DeleteBookMutationVariables>) {\n        return Apollo.useMutation<DeleteBookMutation, DeleteBookMutationVariables>(DeleteBookDocument, baseOptions);\n      }\nexport type DeleteBookMutationHookResult = ReturnType<typeof useDeleteBookMutation>;\nexport type DeleteBookMutationResult = Apollo.MutationResult<DeleteBookMutation>;\nexport type DeleteBookMutationOptions = Apollo.BaseMutationOptions<DeleteBookMutation, DeleteBookMutationVariables>;\nexport const CreateBookDocument = gql`\n    mutation CreateBook($title: String!) {\n  createBook(title: $title) {\n    id\n    title\n    created\n    lastChanged\n    author {\n      name\n    }\n  }\n}\n    `;\nexport type CreateBookMutationFn = Apollo.MutationFunction<CreateBookMutation, CreateBookMutationVariables>;\n\n/**\n * __useCreateBookMutation__\n *\n * To run a mutation, you first call `useCreateBookMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateBookMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createBookMutation, { data, loading, error }] = useCreateBookMutation({\n *   variables: {\n *      title: // value for 'title'\n *   },\n * });\n */\nexport function useCreateBookMutation(baseOptions?: Apollo.MutationHookOptions<CreateBookMutation, CreateBookMutationVariables>) {\n        return Apollo.useMutation<CreateBookMutation, CreateBookMutationVariables>(CreateBookDocument, baseOptions);\n      }\nexport type CreateBookMutationHookResult = ReturnType<typeof useCreateBookMutation>;\nexport type CreateBookMutationResult = Apollo.MutationResult<CreateBookMutation>;\nexport type CreateBookMutationOptions = Apollo.BaseMutationOptions<CreateBookMutation, CreateBookMutationVariables>;\nexport const UpdateBookDocument = gql`\n    mutation UpdateBook($id: ID!, $title: String!) {\n  updateBook(id: $id, title: $title) {\n    id\n    title\n    created\n    lastChanged\n    author {\n      id\n      name\n      email\n    }\n  }\n}\n    `;\nexport type UpdateBookMutationFn = Apollo.MutationFunction<UpdateBookMutation, UpdateBookMutationVariables>;\n\n/**\n * __useUpdateBookMutation__\n *\n * To run a mutation, you first call `useUpdateBookMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateBookMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateBookMutation, { data, loading, error }] = useUpdateBookMutation({\n *   variables: {\n *      id: // value for 'id'\n *      title: // value for 'title'\n *   },\n * });\n */\nexport function useUpdateBookMutation(baseOptions?: Apollo.MutationHookOptions<UpdateBookMutation, UpdateBookMutationVariables>) {\n        return Apollo.useMutation<UpdateBookMutation, UpdateBookMutationVariables>(UpdateBookDocument, baseOptions);\n      }\nexport type UpdateBookMutationHookResult = ReturnType<typeof useUpdateBookMutation>;\nexport type UpdateBookMutationResult = Apollo.MutationResult<UpdateBookMutation>;\nexport type UpdateBookMutationOptions = Apollo.BaseMutationOptions<UpdateBookMutation, UpdateBookMutationVariables>;\nexport const BooksDocument = gql`\n    query Books($first: Int!, $after: String, $where: BooksWhereInput) {\n  books(first: $first, after: $after, where: $where) {\n    nodes {\n      id\n      title\n      created\n      lastChanged\n      author {\n        name\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n    `;\n\n/**\n * __useBooksQuery__\n *\n * To run a query within a React component, call `useBooksQuery` and pass it any options that fit your needs.\n * When your component renders, `useBooksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBooksQuery({\n *   variables: {\n *      first: // value for 'first'\n *      after: // value for 'after'\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useBooksQuery(baseOptions: Apollo.QueryHookOptions<BooksQuery, BooksQueryVariables>) {\n        return Apollo.useQuery<BooksQuery, BooksQueryVariables>(BooksDocument, baseOptions);\n      }\nexport function useBooksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<BooksQuery, BooksQueryVariables>) {\n          return Apollo.useLazyQuery<BooksQuery, BooksQueryVariables>(BooksDocument, baseOptions);\n        }\nexport type BooksQueryHookResult = ReturnType<typeof useBooksQuery>;\nexport type BooksLazyQueryHookResult = ReturnType<typeof useBooksLazyQuery>;\nexport type BooksQueryResult = Apollo.QueryResult<BooksQuery, BooksQueryVariables>;"],"sourceRoot":""}