{"version":3,"sources":["webpack://@bulletproof/client/./src/components/CreateBook/CreateBook.tsx","webpack://@bulletproof/client/./src/components/CreateBook/index.ts","webpack://@bulletproof/client/./src/generated/types.ts"],"names":["user","title","setTitle","React","createBook","loading","data","error","useCreateBookMutation","update","cache","modify","fields","books","existing","nodes","push","newBookRef","writeFragment","fragment","gql","unshift","className","onSubmit","async","e","preventDefault","variables","err","console","style","color","message","id","created","type","name","value","onChange","currentTarget","disabled","BookDocument","useBookQuery","baseOptions","Apollo","DeleteBookDocument","useDeleteBookMutation","CreateBookDocument","UpdateBookDocument","useUpdateBookMutation","BooksDocument","useBooksQuery"],"mappings":"i3BAQA,MCNA,EDMqC,IAAa,IAAb,KAAEA,GAAW,EACjD,MAAOC,EAAOC,GAAYC,WAAuB,KAE1CC,GAAY,QAAEC,EAAF,KAAWC,EAAX,MAAiBC,KAAWC,QAAsB,CACpEC,OAAQ,CAACC,EAAD,KAAqB,IAAb,KAAEJ,GAAW,EAC5BI,EAAMC,OAAO,CACZC,OAAQ,CACPC,MAAQC,IACP,MAAMC,EAAqB,GACvBD,EAASC,OAAOA,EAAMC,QAAQF,EAASC,OAE3C,MAAME,EAAaP,EAAMQ,cAAc,CACtCZ,KAAMA,aAAF,EAAEA,EAAMF,WACZe,UAAUC,QAAF,I,EAAA,wQ,kBAAA,E,qFAeT,OAFAL,EAAMM,QAAQJ,GAEd,OAAYH,GAAZ,IAAsBC,iBAkB3B,OAAKf,EAGJ,uBAAKsB,UAAU,cACd,wCACA,wBAAMC,SAfSC,UAChB,IAEC,GADAC,EAAEC,iBACErB,EAAS,aACPD,EAAW,CAAEuB,UAAW,CAAE1B,WAC/B,MAAO2B,GACRC,QAAQtB,MAAMqB,MAUZrB,EAAQ,uBAAKuB,MAAO,CAAEC,MAAO,QAAUxB,EAAMyB,SAAiB,GAC9D1B,WAAMF,WACN,sCACUE,EAAKF,WAAW6B,GAD1B,OACkC3B,EAAKF,WAAW8B,SAGlD,GAED,yBAAOC,KAAK,OAAOC,KAAK,QAAQC,MAAOpC,EAAOqC,SAzB/Bb,GAAmBvB,EAASuB,EAAEc,cAAcF,SA0B3D,0BAAQG,SAAUnC,EAAS8B,KAAK,UAAhC,YAfe,+D,qOEkKZ,MAAMM,GAAerB,QAAH,+JA8BlB,SAASsB,EAAaC,GACrB,OAAOC,WAA+CH,EAAcE,GAQrE,MAAME,GAAqBzB,QAAH,qFAwBxB,SAAS0B,EAAsBH,GAC9B,OAAOC,cAAoEC,EAAoBF,GAKhG,MAAMI,GAAqB3B,QAAH,2LAgCxB,SAASZ,EAAsBmC,GAC9B,OAAOC,cAAoEG,EAAoBJ,GAKhG,MAAMK,GAAqB5B,QAAH,qOAmCxB,SAAS6B,EAAsBN,GAC9B,OAAOC,cAAoEI,EAAoBL,GAKhG,MAAMO,GAAgB9B,QAAH,+UAsCnB,SAAS+B,EAAcR,GACtB,OAAOC,WAAiDM,EAAeP","file":"474.bundle.js","sourcesContent":["import React from 'react'\nimport { gql, Reference } from '@apollo/client'\nimport { useCreateBookMutation } from '../../generated/types'\n\ntype Props = { user?: ITokenPayload }\ntype InputChange = React.ChangeEvent<HTMLInputElement>\ntype SubmitEvent = React.FormEvent<HTMLFormElement>\n\nconst CreateBook: React.FC<Props> = ({ user }) => {\n\tconst [title, setTitle] = React.useState<string>('')\n\n\tconst [createBook, { loading, data, error }] = useCreateBookMutation({\n\t\tupdate: (cache, { data }) => {\n\t\t\tcache.modify({\n\t\t\t\tfields: {\n\t\t\t\t\tbooks: (existing) => {\n\t\t\t\t\t\tconst nodes: Reference[] = []\n\t\t\t\t\t\tif (existing.nodes) nodes.push(...existing.nodes)\n\n\t\t\t\t\t\tconst newBookRef = cache.writeFragment({\n\t\t\t\t\t\t\tdata: data?.createBook,\n\t\t\t\t\t\t\tfragment: gql`\n\t\t\t\t\t\t\t\tfragment NewBook on Book {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\t\t\tcreated\n\t\t\t\t\t\t\t\t\tlastChanged\n\t\t\t\t\t\t\t\t\tauthor {\n\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t`,\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tnodes.unshift(newBookRef!)\n\n\t\t\t\t\t\treturn { ...existing, nodes }\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t})\n\t\t},\n\t})\n\n\tconst onChange = (e: InputChange) => setTitle(e.currentTarget.value)\n\tconst onSubmit = async (e: SubmitEvent) => {\n\t\ttry {\n\t\t\te.preventDefault()\n\t\t\tif (loading) return\n\t\t\tawait createBook({ variables: { title } })\n\t\t} catch (err) {\n\t\t\tconsole.error(err)\n\t\t}\n\t}\n\n\tif (!user) return <div>You have to be logged in first</div>\n\n\treturn (\n\t\t<div className=\"CreateBook\">\n\t\t\t<h2>CreateBook</h2>\n\t\t\t<form onSubmit={onSubmit}>\n\t\t\t\t{error ? <div style={{ color: 'red' }}>{error.message}</div> : ''}\n\t\t\t\t{data?.createBook ? (\n\t\t\t\t\t<div>\n\t\t\t\t\t\tCreated {data.createBook.id} at {data.createBook.created}\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t''\n\t\t\t\t)}\n\t\t\t\t<input type=\"text\" name=\"title\" value={title} onChange={onChange} />\n\t\t\t\t<button disabled={loading} type=\"submit\">\n\t\t\t\t\tSubmit\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t</div>\n\t)\n}\n\nexport default CreateBook\n","import CreateBook from './CreateBook'\n\nexport default CreateBook\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  DateTime: any;\n  Date: any;\n  Time: any;\n};\n\n\nexport type AuthData = {\n  __typename?: 'AuthData';\n  user: User;\n  token: Scalars['String'];\n  tokenExpiration: Scalars['String'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  email?: Maybe<Scalars['String']>;\n  joined: Scalars['DateTime'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createBook?: Maybe<Book>;\n  deleteBook?: Maybe<Scalars['ID']>;\n  signin?: Maybe<AuthData>;\n  signup?: Maybe<User>;\n  updateBook?: Maybe<Book>;\n};\n\n\nexport type MutationCreateBookArgs = {\n  title: Scalars['String'];\n};\n\n\nexport type MutationDeleteBookArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationSigninArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type MutationSignupArgs = {\n  name: Scalars['String'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type MutationUpdateBookArgs = {\n  id: Scalars['ID'];\n  title: Scalars['String'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  book?: Maybe<Book>;\n  books: BookConnection;\n  me?: Maybe<User>;\n};\n\n\nexport type QueryBookArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryBooksArgs = {\n  after?: Maybe<Scalars['String']>;\n  first: Scalars['Int'];\n  where?: Maybe<BooksWhereInput>;\n};\n\nexport type Book = {\n  __typename?: 'Book';\n  id: Scalars['ID'];\n  title: Scalars['String'];\n  author: User;\n  created: Scalars['DateTime'];\n  lastChanged: Scalars['DateTime'];\n};\n\nexport type BookConnection = {\n  __typename?: 'BookConnection';\n  edges: Array<BookEdge>;\n  nodes: Array<Book>;\n  pageInfo: PageInfo;\n};\n\nexport type BookEdge = {\n  __typename?: 'BookEdge';\n  node: Book;\n  cursor: Scalars['String'];\n};\n\nexport type BooksWhereInput = {\n  _id?: Maybe<Scalars['String']>;\n};\n\n\n\n\nexport type PageInfo = {\n  __typename?: 'PageInfo';\n  startCursor?: Maybe<Scalars['String']>;\n  endCursor?: Maybe<Scalars['String']>;\n  hasNextPage: Scalars['Boolean'];\n  hasPreviousPage: Scalars['Boolean'];\n};\n\nexport type BookQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type BookQuery = (\n  { __typename?: 'Query' }\n  & { book?: Maybe<(\n    { __typename?: 'Book' }\n    & Pick<Book, 'id' | 'title' | 'created' | 'lastChanged'>\n    & { author: (\n      { __typename?: 'User' }\n      & Pick<User, 'name'>\n    ) }\n  )> }\n);\n\nexport type DeleteBookMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type DeleteBookMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteBook'>\n);\n\nexport type CreateBookMutationVariables = Exact<{\n  title: Scalars['String'];\n}>;\n\n\nexport type CreateBookMutation = (\n  { __typename?: 'Mutation' }\n  & { createBook?: Maybe<(\n    { __typename?: 'Book' }\n    & Pick<Book, 'id' | 'title' | 'created' | 'lastChanged'>\n    & { author: (\n      { __typename?: 'User' }\n      & Pick<User, 'name'>\n    ) }\n  )> }\n);\n\nexport type UpdateBookMutationVariables = Exact<{\n  id: Scalars['ID'];\n  title: Scalars['String'];\n}>;\n\n\nexport type UpdateBookMutation = (\n  { __typename?: 'Mutation' }\n  & { updateBook?: Maybe<(\n    { __typename?: 'Book' }\n    & Pick<Book, 'id' | 'title' | 'created' | 'lastChanged'>\n    & { author: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'name' | 'email'>\n    ) }\n  )> }\n);\n\nexport type BooksQueryVariables = Exact<{\n  first: Scalars['Int'];\n  after?: Maybe<Scalars['String']>;\n  where?: Maybe<BooksWhereInput>;\n}>;\n\n\nexport type BooksQuery = (\n  { __typename?: 'Query' }\n  & { books: (\n    { __typename?: 'BookConnection' }\n    & { nodes: Array<(\n      { __typename?: 'Book' }\n      & Pick<Book, 'id' | 'title' | 'created' | 'lastChanged'>\n      & { author: (\n        { __typename?: 'User' }\n        & Pick<User, 'name'>\n      ) }\n    )>, pageInfo: (\n      { __typename?: 'PageInfo' }\n      & Pick<PageInfo, 'endCursor' | 'hasNextPage'>\n    ) }\n  ) }\n);\n\n\nexport const BookDocument = gql`\n    query Book($id: ID!) {\n  book(id: $id) {\n    id\n    title\n    author {\n      name\n    }\n    created\n    lastChanged\n  }\n}\n    `;\n\n/**\n * __useBookQuery__\n *\n * To run a query within a React component, call `useBookQuery` and pass it any options that fit your needs.\n * When your component renders, `useBookQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBookQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useBookQuery(baseOptions: Apollo.QueryHookOptions<BookQuery, BookQueryVariables>) {\n        return Apollo.useQuery<BookQuery, BookQueryVariables>(BookDocument, baseOptions);\n      }\nexport function useBookLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<BookQuery, BookQueryVariables>) {\n          return Apollo.useLazyQuery<BookQuery, BookQueryVariables>(BookDocument, baseOptions);\n        }\nexport type BookQueryHookResult = ReturnType<typeof useBookQuery>;\nexport type BookLazyQueryHookResult = ReturnType<typeof useBookLazyQuery>;\nexport type BookQueryResult = Apollo.QueryResult<BookQuery, BookQueryVariables>;\nexport const DeleteBookDocument = gql`\n    mutation DeleteBook($id: ID!) {\n  deleteBook(id: $id)\n}\n    `;\nexport type DeleteBookMutationFn = Apollo.MutationFunction<DeleteBookMutation, DeleteBookMutationVariables>;\n\n/**\n * __useDeleteBookMutation__\n *\n * To run a mutation, you first call `useDeleteBookMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteBookMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteBookMutation, { data, loading, error }] = useDeleteBookMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteBookMutation(baseOptions?: Apollo.MutationHookOptions<DeleteBookMutation, DeleteBookMutationVariables>) {\n        return Apollo.useMutation<DeleteBookMutation, DeleteBookMutationVariables>(DeleteBookDocument, baseOptions);\n      }\nexport type DeleteBookMutationHookResult = ReturnType<typeof useDeleteBookMutation>;\nexport type DeleteBookMutationResult = Apollo.MutationResult<DeleteBookMutation>;\nexport type DeleteBookMutationOptions = Apollo.BaseMutationOptions<DeleteBookMutation, DeleteBookMutationVariables>;\nexport const CreateBookDocument = gql`\n    mutation CreateBook($title: String!) {\n  createBook(title: $title) {\n    id\n    title\n    created\n    lastChanged\n    author {\n      name\n    }\n  }\n}\n    `;\nexport type CreateBookMutationFn = Apollo.MutationFunction<CreateBookMutation, CreateBookMutationVariables>;\n\n/**\n * __useCreateBookMutation__\n *\n * To run a mutation, you first call `useCreateBookMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateBookMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createBookMutation, { data, loading, error }] = useCreateBookMutation({\n *   variables: {\n *      title: // value for 'title'\n *   },\n * });\n */\nexport function useCreateBookMutation(baseOptions?: Apollo.MutationHookOptions<CreateBookMutation, CreateBookMutationVariables>) {\n        return Apollo.useMutation<CreateBookMutation, CreateBookMutationVariables>(CreateBookDocument, baseOptions);\n      }\nexport type CreateBookMutationHookResult = ReturnType<typeof useCreateBookMutation>;\nexport type CreateBookMutationResult = Apollo.MutationResult<CreateBookMutation>;\nexport type CreateBookMutationOptions = Apollo.BaseMutationOptions<CreateBookMutation, CreateBookMutationVariables>;\nexport const UpdateBookDocument = gql`\n    mutation UpdateBook($id: ID!, $title: String!) {\n  updateBook(id: $id, title: $title) {\n    id\n    title\n    created\n    lastChanged\n    author {\n      id\n      name\n      email\n    }\n  }\n}\n    `;\nexport type UpdateBookMutationFn = Apollo.MutationFunction<UpdateBookMutation, UpdateBookMutationVariables>;\n\n/**\n * __useUpdateBookMutation__\n *\n * To run a mutation, you first call `useUpdateBookMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateBookMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateBookMutation, { data, loading, error }] = useUpdateBookMutation({\n *   variables: {\n *      id: // value for 'id'\n *      title: // value for 'title'\n *   },\n * });\n */\nexport function useUpdateBookMutation(baseOptions?: Apollo.MutationHookOptions<UpdateBookMutation, UpdateBookMutationVariables>) {\n        return Apollo.useMutation<UpdateBookMutation, UpdateBookMutationVariables>(UpdateBookDocument, baseOptions);\n      }\nexport type UpdateBookMutationHookResult = ReturnType<typeof useUpdateBookMutation>;\nexport type UpdateBookMutationResult = Apollo.MutationResult<UpdateBookMutation>;\nexport type UpdateBookMutationOptions = Apollo.BaseMutationOptions<UpdateBookMutation, UpdateBookMutationVariables>;\nexport const BooksDocument = gql`\n    query Books($first: Int!, $after: String, $where: BooksWhereInput) {\n  books(first: $first, after: $after, where: $where) {\n    nodes {\n      id\n      title\n      created\n      lastChanged\n      author {\n        name\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n    `;\n\n/**\n * __useBooksQuery__\n *\n * To run a query within a React component, call `useBooksQuery` and pass it any options that fit your needs.\n * When your component renders, `useBooksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBooksQuery({\n *   variables: {\n *      first: // value for 'first'\n *      after: // value for 'after'\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useBooksQuery(baseOptions: Apollo.QueryHookOptions<BooksQuery, BooksQueryVariables>) {\n        return Apollo.useQuery<BooksQuery, BooksQueryVariables>(BooksDocument, baseOptions);\n      }\nexport function useBooksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<BooksQuery, BooksQueryVariables>) {\n          return Apollo.useLazyQuery<BooksQuery, BooksQueryVariables>(BooksDocument, baseOptions);\n        }\nexport type BooksQueryHookResult = ReturnType<typeof useBooksQuery>;\nexport type BooksLazyQueryHookResult = ReturnType<typeof useBooksLazyQuery>;\nexport type BooksQueryResult = Apollo.QueryResult<BooksQuery, BooksQueryVariables>;"],"sourceRoot":""}